{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red253\green217\blue76;\red28\green26\blue40;\red252\green97\blue211;
\red250\green42\blue63;\red173\green173\blue173;\red255\green255\blue255;\red245\green103\blue95;\red53\green250\blue243;
\red252\green118\blue44;\red113\green118\blue175;}
{\*\expandedcolortbl;;\cssrgb\c99608\c87059\c36471;\cssrgb\c14902\c13725\c20784;\cssrgb\c100000\c49412\c85882;
\cssrgb\c99608\c26667\c31373;\cssrgb\c73333\c73333\c73333;\cssrgb\c100000\c100000\c100000;\cssrgb\c97647\c49412\c44706;\cssrgb\c21176\c97647\c96471;
\cssrgb\c100000\c54510\c22353;\cssrgb\c51765\c54510\c74118;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 struct\cf6 \cb1 \strokec6 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 math\cf6 \cb1 \strokec6 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 logging\cf6 \cb1 \strokec6 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 enum\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 IntEnum\cf6 \cb1 \strokec6 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 threading\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  RLock\cf6 \cb1 \strokec6 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 typing\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 NamedTuple\cf4 \strokec4 , Set, \cf5 \strokec5 Optional\cf6 \cb1 \strokec6 \
\
\cf2 \cb3 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 serial\cf6 \cb1 \strokec6 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 serial\cf4 \strokec4 .\cf5 \strokec5 tools\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 list_ports\cf6 \cb1 \strokec6 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  _collections \cf2 \strokec2 import\cf4 \strokec4  deque\cf6 \cb1 \strokec6 \
\
\cf2 \cb3 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 pydobot\cf4 \strokec4 .\cf5 \strokec5 message\cf4 \strokec4  \cf2 \strokec2 import\cf4 \strokec4  \cf5 \strokec5 Message\cf6 \cb1 \strokec6 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 MAX_QUEUE_LEN \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 32\cf6 \cb1 \strokec6 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 MODE_PTP\cf4 \strokec4 (\cf5 \strokec5 IntEnum\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4     JUMP_XYZ \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 00\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOVJ_XYZ \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 01\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOVL_XYZ \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 02\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     JUMP_ANGLE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOVJ_ANGLE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 04\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOVL_ANGLE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 05\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOVJ_INC \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 06\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOVL_INC \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 07\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOVJ_XYZ_INC \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 08\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     JUMP_MOVL_XYZ \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 09\cf6 \cb1 \strokec6 \
\
\
\cf4 \cb3 \strokec4 STEP_PER_CIRCLE \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 360.0\cf4 \strokec4  \cf2 \strokec2 /\cf4 \strokec4  \cf8 \strokec8 1.8\cf4 \strokec4  \cf2 \strokec2 *\cf4 \strokec4  \cf8 \strokec8 10.0\cf4 \strokec4  \cf2 \strokec2 *\cf4 \strokec4  \cf8 \strokec8 16.0\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4 MM_PER_CIRCLE \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 3.1415926535898\cf4 \strokec4  \cf2 \strokec2 *\cf4 \strokec4  \cf8 \strokec8 36.0\cf6 \cb1 \strokec6 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 DobotException\cf4 \strokec4 (\cf5 \strokec5 Exception\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4     \cf2 \strokec2 pass\cf6 \cb1 \strokec6 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 Position\cf4 \strokec4 (\cf5 \strokec5 NamedTuple\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4     x: \cf5 \strokec5 float\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     y: \cf5 \strokec5 float\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     z: \cf5 \strokec5 float\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     r: \cf5 \strokec5 float\cf6 \cb1 \strokec6 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 Joints\cf4 \strokec4 (\cf5 \strokec5 NamedTuple\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4     j1: \cf5 \strokec5 float\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     j2: \cf5 \strokec5 float\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     j3: \cf5 \strokec5 float\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     j4: \cf5 \strokec5 float\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 in_radians\cf4 \strokec4 (
\f1\i self
\f0\i0 ) -> \cf10 \strokec10 "\cf5 \strokec5 Joints\cf10 \strokec10 "\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 Joints\cf4 \strokec4 (\cf5 \strokec5 math\cf4 \strokec4 .\cf9 \strokec9 radians\cf4 \strokec4 (
\f1\i self
\f0\i0 .j1), \cf5 \strokec5 math\cf4 \strokec4 .\cf9 \strokec9 radians\cf4 \strokec4 (
\f1\i self
\f0\i0 .j2), \cf5 \strokec5 math\cf4 \strokec4 .\cf9 \strokec9 radians\cf4 \strokec4 (
\f1\i self
\f0\i0 .j3), \cf5 \strokec5 math\cf4 \strokec4 .\cf9 \strokec9 radians\cf4 \strokec4 (
\f1\i self
\f0\i0 .j4))\cf6 \cb1 \strokec6 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 Pose\cf4 \strokec4 (\cf5 \strokec5 NamedTuple\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4     position: \cf5 \strokec5 Position\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     joints: \cf5 \strokec5 Joints\cf6 \cb1 \strokec6 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 Alarm\cf4 \strokec4 (\cf5 \strokec5 IntEnum\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4     COMMON_RESETTING \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 00\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     COMMON_UNDEFINED_INSTRUCTION \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 01\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     COMMON_FILE_SYSTEM \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 02\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     COMMON_MCU_FPGA_COMM \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     COMMON_ANGLE_SENSOR \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 04\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     PLAN_INV_SINGULARITY \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 10\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     PLAN_INV_CALC \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 11\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     PLAN_INV_LIMIT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 12\cf4 \strokec4 , 
\f1\i \cf11 \strokec11 # !!!
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     PLAN_PUSH_DATA_REPEAT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 13\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     PLAN_ARC_INPUT_PARAM \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 14\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     PLAN_JUMP_PARAM \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 15\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     PLAN_LINE_HAND \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 16\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     PLAN_LINE_OUT_SPACE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 17\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     PLAN_ARC_OUT_SPACE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 18\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     PLAN_MOTIONTYPE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 19\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     PLAN_SPEED_INPUT_PARAM \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 1A\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     PLAN_CP_CALC \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 1B\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     MOVE_INV_SINGULARITY \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 20\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOVE_INV_CALC \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 21\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOVE_INV_LIMIT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 22\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     OVERSPEED_AXIS1 \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 30\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OVERSPEED_AXIS2 \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 31\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OVERSPEED_AXIS3 \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 32\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OVERSPEED_AXIS4 \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 33\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     LIMIT_AXIS1_POS \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 40\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     LIMIT_AXIS1_NEG \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 41\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     LIMIT_AXIS2_POS \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 42\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     LIMIT_AXIS2_NEG \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 43\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     LIMIT_AXIS3_POS \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 44\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     LIMIT_AXIS3_NEG \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 45\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     LIMIT_AXIS4_POS \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 46\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     LIMIT_AXIS4_NEG \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 47\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     LIMIT_AXIS23_POS \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 48\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     LIMIT_AXIS23_NEG \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 49\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     LOSE_STEP_AXIS1 \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 50\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     LOSE_STEP_AXIS2 \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 51\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     LOSE_STEP_AXIS3 \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 52\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     LOSE_STEP_AXIS4 \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 53\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     OTHER_AXIS1_DRV_ALARM \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 60\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OTHER_AXIS1_OVERFLOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 61\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OTHER_AXIS1_FOLLOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 62\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OTHER_AXIS2_DRV_ALARM \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 63\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OTHER_AXIS2_OVERFLOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 64\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OTHER_AXIS2_FOLLOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 65\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OTHER_AXIS3_DRV_ALARM \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 66\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OTHER_AXIS3_OVERFLOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 67\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OTHER_AXIS3_FOLLOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 68\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OTHER_AXIS4_DRV_ALARM \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 69\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OTHER_AXIS4_OVERFLOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 6A\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     OTHER_AXIS4_FOLLOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 6B\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     MOTOR_REAR_ENCODER \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 70\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_TEMPERATURE_HIGH \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 71\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_TEMPERATURE_LOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 72\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_LOCK_CURRENT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 73\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_BUSV_HIGH \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 74\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_BUSV_LOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 75\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_OVERHEAT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 76\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_RUNAWAY \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 77\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_BATTERY_LOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 78\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_PHASE_SHORT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 79\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_PHASE_WRONG \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 7A\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_LOST_SPEED \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 7B\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_NOT_STANDARDIZE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 7C\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     ENCODER_REAR_NOT_STANDARDIZE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 7D\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_REAR_CAN_BROKE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 7E\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     MOTOR_FRONT_ENCODER \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 80\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_TEMPERATURE_HIGH \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 81\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_TEMPERATURE_LOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 82\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_LOCK_CURRENT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 83\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_BUSV_HIGH \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 84\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_BUSV_LOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 85\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_OVERHEAT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 86\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_RUNAWAY \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 87\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_BATTERY_LOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 88\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_PHASE_SHORT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 89\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_PHASE_WRONG \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 8A\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_LOST_SPEED \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 8B\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_NOT_STANDARDIZE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 8C\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     ENCODER_FRONT_NOT_STANDARDIZE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 8D\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_FRONT_CAN_BROKE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 8E\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     MOTOR_Z_ENCODER \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 90\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_TEMPERATURE_HIGH \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 91\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_TEMPERATURE_LOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 92\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_LOCK_CURRENT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 93\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_BUSV_HIGH \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 94\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_BUSV_LOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 95\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_OVERHEAT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 96\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_RUNAWAY \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 97\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_BATTERY_LOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 98\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_PHASE_SHORT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 99\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_PHASE_WRONG \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 9A\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_LOST_SPEED \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 9B\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_NOT_STANDARDIZE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 9C\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     ENCODER_Z_NOT_STANDARDIZE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 9D\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_Z_CAN_BROKE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 9E\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     MOTOR_R_ENCODER \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 A0\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_TEMPERATURE_HIGH \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 A1\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_TEMPERATURE_LOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 A2\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_LOCK_CURRENT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 A3\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_BUSV_HIGH \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 A4\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_BUSV_LOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 A5\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_OVERHEAT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 A6\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_RUNAWAY \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 A7\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_BATTERY_LOW \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 A8\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_PHASE_SHORT \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 A9\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_PHASE_WRONG \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 AA\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_LOST_SPEED \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 AB\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_NOT_STANDARDIZE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 AC\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     ENCODER_R_NOT_STANDARDIZE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 AD\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_R_CAN_BROKE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 AE\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     MOTOR_ENDIO_IO \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 B0\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_ENDIO_RS485_WRONG \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 B1\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     MOTOR_ENDIO_CAN_BROKE \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 B2\cf6 \cb1 \strokec6 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 class\cf4 \strokec4  \cf5 \strokec5 Dobot\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 __init__\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i port
\f0\i0 : \cf5 \strokec5 Optional\cf4 \strokec4 [\cf5 \strokec5 str\cf4 \strokec4 ] \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 None\cf4 \strokec4 ) -> \cf8 \strokec8 None\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .logger \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 logging\cf4 \strokec4 .\cf5 \strokec5 Logger\cf4 \strokec4 (__name__)\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 ._lock \cf7 \strokec7 =\cf4 \strokec4  RLock()\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i port
\f0\i0  \cf2 \strokec2 is\cf4 \strokec4  \cf8 \strokec8 None\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i \cf11 \strokec11 # Find the serial port
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             ports \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 list_ports\cf4 \strokec4 .\cf9 \strokec9 comports\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 for\cf4 \strokec4  thing \cf2 \strokec2 in\cf4 \strokec4  ports:\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf2 \strokec2 if\cf4 \strokec4  thing.vid \cf2 \strokec2 in\cf4 \strokec4  (\cf8 \strokec8 4292\cf4 \strokec4 , \cf8 \strokec8 6790\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                     
\f1\i self
\f0\i0 .logger.\cf9 \strokec9 debug\cf4 \strokec4 (\cf2 \strokec2 f\cf10 \strokec10 "Found a com port to talk to DOBOT (\cf8 \strokec8 \{\cf4 \strokec4 thing\cf8 \strokec8 \}\cf10 \strokec10 )."\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                     
\f1\i port
\f0\i0  \cf7 \strokec7 =\cf4 \strokec4  thing.device\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                     \cf2 \strokec2 break\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf2 \strokec2 raise\cf4 \strokec4  \cf5 \strokec5 DobotException\cf4 \strokec4 (\cf10 \strokec10 "Device not found!"\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         \cf2 \strokec2 try\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i self
\f0\i0 ._ser \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 serial\cf4 \strokec4 .\cf5 \strokec5 Serial\cf4 \strokec4 (\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 
\f1\i port
\f0\i0 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 
\f1\i baudrate
\f0\i0 \cf7 \strokec7 =\cf8 \strokec8 115200\cf4 \strokec4 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 
\f1\i parity
\f0\i0 \cf7 \strokec7 =\cf5 \strokec5 serial\cf4 \strokec4 .PARITY_NONE,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 
\f1\i stopbits
\f0\i0 \cf7 \strokec7 =\cf5 \strokec5 serial\cf4 \strokec4 .STOPBITS_ONE,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 
\f1\i bytesize
\f0\i0 \cf7 \strokec7 =\cf5 \strokec5 serial\cf4 \strokec4 .EIGHTBITS)\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 except\cf4 \strokec4  \cf5 \strokec5 serial\cf4 \strokec4 .serialutil.SerialException \cf2 \strokec2 as\cf4 \strokec4  e:\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 raise\cf4 \strokec4  \cf5 \strokec5 DobotException\cf4 \strokec4  \cf2 \strokec2 from\cf4 \strokec4  e\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .logger.\cf9 \strokec9 debug\cf4 \strokec4 (\cf10 \strokec10 'pydobot: \cf8 \strokec8 %s\cf10 \strokec10  open'\cf4 \strokec4  \cf2 \strokec2 %\cf4 \strokec4  
\f1\i self
\f0\i0 ._ser.name \cf2 \strokec2 if\cf4 \strokec4  
\f1\i self
\f0\i0 ._ser.\cf9 \strokec9 isOpen\cf4 \strokec4 () \cf2 \strokec2 else\cf4 \strokec4  \cf10 \strokec10 'failed to open serial port'\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_queued_cmd_start_exec\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_queued_cmd_clear\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_ptp_joint_params\cf4 \strokec4 (\cf8 \strokec8 200\cf4 \strokec4 , \cf8 \strokec8 200\cf4 \strokec4 , \cf8 \strokec8 200\cf4 \strokec4 , \cf8 \strokec8 200\cf4 \strokec4 , \cf8 \strokec8 200\cf4 \strokec4 , \cf8 \strokec8 200\cf4 \strokec4 , \cf8 \strokec8 200\cf4 \strokec4 , \cf8 \strokec8 200\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_ptp_coordinate_params\cf4 \strokec4 (
\f1\i velocity
\f0\i0 \cf7 \strokec7 =\cf8 \strokec8 200\cf4 \strokec4 , 
\f1\i acceleration
\f0\i0 \cf7 \strokec7 =\cf8 \strokec8 200\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_ptp_jump_params\cf4 \strokec4 (\cf8 \strokec8 10\cf4 \strokec4 , \cf8 \strokec8 200\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_ptp_common_params\cf4 \strokec4 (
\f1\i velocity
\f0\i0 \cf7 \strokec7 =\cf8 \strokec8 100\cf4 \strokec4 , 
\f1\i acceleration
\f0\i0 \cf7 \strokec7 =\cf8 \strokec8 100\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         alarms \cf7 \strokec7 =\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 get_alarms\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  alarms:\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i self
\f0\i0 .logger.\cf9 \strokec9 warning\cf4 \strokec4 (\cf2 \strokec2 f\cf10 \strokec10 "Clearing alarms: \cf8 \strokec8 \{\cf10 \strokec10 ', '\cf4 \strokec4 .\cf9 \strokec9 join\cf4 \strokec4 (\cf5 \strokec5 map\cf4 \strokec4 (\cf5 \strokec5 str\cf4 \strokec4 , alarms))\cf8 \strokec8 \}\cf10 \strokec10 ."\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i self
\f0\i0 .\cf9 \strokec9 clear_alarms\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 close\cf4 \strokec4 (
\f1\i self
\f0\i0 ) -> \cf8 \strokec8 None\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 with\cf4 \strokec4  
\f1\i self
\f0\i0 ._lock:\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i self
\f0\i0 ._ser.\cf9 \strokec9 close\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .logger.\cf9 \strokec9 debug\cf4 \strokec4 (\cf10 \strokec10 'pydobot: \cf8 \strokec8 %s\cf10 \strokec10  closed'\cf4 \strokec4  \cf2 \strokec2 %\cf4 \strokec4  
\f1\i self
\f0\i0 ._ser.name)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _send_command\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i msg
\f0\i0 ) -> \cf5 \strokec5 Message\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 with\cf4 \strokec4  
\f1\i self
\f0\i0 ._lock:\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i self
\f0\i0 ._ser.\cf9 \strokec9 reset_input_buffer\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_message\cf4 \strokec4 (
\f1\i msg
\f0\i0 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i msg
\f0\i0  \cf7 \strokec7 =\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _read_message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i msg
\f0\i0  \cf2 \strokec2 is\cf4 \strokec4  \cf8 \strokec8 None\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 raise\cf4 \strokec4  \cf5 \strokec5 DobotException\cf4 \strokec4 (\cf10 \strokec10 "No response!"\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i msg
\f0\i0 \cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _send_message\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i msg
\f0\i0 ) -> \cf8 \strokec8 None\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .logger.\cf9 \strokec9 debug\cf4 \strokec4 (\cf10 \strokec10 'pydobot: >>'\cf4 \strokec4 , 
\f1\i msg
\f0\i0 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 with\cf4 \strokec4  
\f1\i self
\f0\i0 ._lock:\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i self
\f0\i0 ._ser.\cf9 \strokec9 write\cf4 \strokec4 (
\f1\i msg
\f0\i0 .\cf9 \strokec9 bytes\cf4 \strokec4 ())\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _read_message\cf4 \strokec4 (
\f1\i self
\f0\i0 ) -> \cf5 \strokec5 Optional\cf4 \strokec4 [\cf5 \strokec5 Message\cf4 \strokec4 ]:\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i \cf11 \strokec11 # Search for begin
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         begin_found \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 False\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         last_byte \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 None\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         tries \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 5\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 while\cf4 \strokec4  \cf2 \strokec2 not\cf4 \strokec4  begin_found \cf2 \strokec2 and\cf4 \strokec4  tries \cf2 \strokec2 >\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             current_byte \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 ord\cf4 \strokec4 (
\f1\i self
\f0\i0 ._ser.\cf9 \strokec9 read\cf4 \strokec4 (\cf8 \strokec8 1\cf4 \strokec4 ))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 if\cf4 \strokec4  current_byte \cf2 \strokec2 ==\cf4 \strokec4  \cf8 \strokec8 170\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf2 \strokec2 if\cf4 \strokec4  last_byte \cf2 \strokec2 ==\cf4 \strokec4  \cf8 \strokec8 170\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                     begin_found \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 True\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             last_byte \cf7 \strokec7 =\cf4 \strokec4  current_byte\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             tries \cf7 \strokec7 =\cf4 \strokec4  tries \cf2 \strokec2 -\cf4 \strokec4  \cf8 \strokec8 1\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  begin_found:\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             payload_length \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 ord\cf4 \strokec4 (
\f1\i self
\f0\i0 ._ser.\cf9 \strokec9 read\cf4 \strokec4 (\cf8 \strokec8 1\cf4 \strokec4 ))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             payload_checksum \cf7 \strokec7 =\cf4 \strokec4  
\f1\i self
\f0\i0 ._ser.\cf9 \strokec9 read\cf4 \strokec4 (payload_length \cf2 \strokec2 +\cf4 \strokec4  \cf8 \strokec8 1\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 if\cf4 \strokec4  \cf9 \strokec9 len\cf4 \strokec4 (payload_checksum) \cf2 \strokec2 ==\cf4 \strokec4  payload_length \cf2 \strokec2 +\cf4 \strokec4  \cf8 \strokec8 1\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 b \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 AA\cf4 \strokec4 , \cf2 \strokec2 0x\cf8 \strokec8 AA\cf4 \strokec4 ])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 b.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([payload_length]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 b.\cf9 \strokec9 extend\cf4 \strokec4 (payload_checksum)\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 (b)\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 
\f1\i self
\f0\i0 .logger.\cf9 \strokec9 debug\cf4 \strokec4 (\cf10 \strokec10 'Lenght'\cf4 \strokec4 , payload_length)\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 
\f1\i self
\f0\i0 .logger.\cf9 \strokec9 debug\cf4 \strokec4 (payload_checksum)\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 
\f1\i self
\f0\i0 .logger.\cf9 \strokec9 debug\cf4 \strokec4 (\cf10 \strokec10 'MessageID:'\cf4 \strokec4 , payload_checksum[\cf8 \strokec8 0\cf4 \strokec4 ])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 
\f1\i self
\f0\i0 .logger.\cf9 \strokec9 debug\cf4 \strokec4 (\cf10 \strokec10 'pydobot: <<'\cf4 \strokec4 , \cf10 \strokec10 ":"\cf4 \strokec4 .\cf9 \strokec9 join\cf4 \strokec4 (\cf10 \strokec10 '\cf8 \strokec8 \{\cf2 \strokec2 :02x\cf8 \strokec8 \}\cf10 \strokec10 '\cf4 \strokec4 .\cf9 \strokec9 format\cf4 \strokec4 (x) \cf2 \strokec2 for\cf4 \strokec4  x \cf2 \strokec2 in\cf4 \strokec4  b))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf2 \strokec2 return\cf4 \strokec4  msg\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  \cf8 \strokec8 None\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 get_pose\cf4 \strokec4 (
\f1\i self
\f0\i0 ) -> \cf5 \strokec5 Pose\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 10\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         response \cf7 \strokec7 =\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 Pose\cf4 \strokec4 (\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf5 \strokec5 Position\cf4 \strokec4 (\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 unpack_from\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , response.params, \cf8 \strokec8 0\cf4 \strokec4 )[\cf8 \strokec8 0\cf4 \strokec4 ],\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 unpack_from\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , response.params, \cf8 \strokec8 4\cf4 \strokec4 )[\cf8 \strokec8 0\cf4 \strokec4 ],\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 unpack_from\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , response.params, \cf8 \strokec8 8\cf4 \strokec4 )[\cf8 \strokec8 0\cf4 \strokec4 ],\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 unpack_from\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , response.params, \cf8 \strokec8 12\cf4 \strokec4 )[\cf8 \strokec8 0\cf4 \strokec4 ]\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             ),\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf5 \strokec5 Joints\cf4 \strokec4 (\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 unpack_from\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , response.params, \cf8 \strokec8 16\cf4 \strokec4 )[\cf8 \strokec8 0\cf4 \strokec4 ],\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 unpack_from\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , response.params, \cf8 \strokec8 20\cf4 \strokec4 )[\cf8 \strokec8 0\cf4 \strokec4 ],\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 unpack_from\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , response.params, \cf8 \strokec8 24\cf4 \strokec4 )[\cf8 \strokec8 0\cf4 \strokec4 ],\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 unpack_from\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , response.params, \cf8 \strokec8 28\cf4 \strokec4 )[\cf8 \strokec8 0\cf4 \strokec4 ]\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         )\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 get_alarms\cf4 \strokec4 (
\f1\i self
\f0\i0 ) -> Set[\cf5 \strokec5 Alarm\cf4 \strokec4 ]:\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 20\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         response \cf7 \strokec7 =\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)  
\f1\i \cf11 \strokec11 # 32 bytes
\f0\i0 \cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         ret: Set[\cf5 \strokec5 Alarm\cf4 \strokec4 ] \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 set\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         \cf2 \strokec2 for\cf4 \strokec4  idx \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 range\cf4 \strokec4 (\cf8 \strokec8 16\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             alarm_byte \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 unpack_from\cf4 \strokec4 (\cf10 \strokec10 'B'\cf4 \strokec4 , response.params, idx)[\cf8 \strokec8 0\cf4 \strokec4 ]\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 for\cf4 \strokec4  alarm_index \cf2 \strokec2 in\cf4 \strokec4  [i \cf2 \strokec2 for\cf4 \strokec4  i \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 range\cf4 \strokec4 (alarm_byte.\cf9 \strokec9 bit_length\cf4 \strokec4 ()) \cf2 \strokec2 if\cf4 \strokec4  alarm_byte \cf2 \strokec2 &\cf4 \strokec4  (\cf8 \strokec8 1\cf4 \strokec4  \cf2 \strokec2 <<\cf4 \strokec4  i)]:\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 ret.\cf9 \strokec9 add\cf4 \strokec4 (\cf5 \strokec5 Alarm\cf4 \strokec4 (idx\cf2 \strokec2 *\cf8 \strokec8 8\cf2 \strokec2 +\cf4 \strokec4 alarm_index))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  ret\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 clear_alarms\cf4 \strokec4 (
\f1\i self
\f0\i0 ) -> \cf8 \strokec8 None\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 20\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 01\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)  
\f1\i \cf11 \strokec11 # empty response
\f0\i0 \cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_cp_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 91\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 bytes\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 01\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i x
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i y
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i z
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 append\cf4 \strokec4 (\cf2 \strokec2 0x\cf8 \strokec8 00\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_ptp_joint_params\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i v_x
\f0\i0 , 
\f1\i v_y
\f0\i0 , 
\f1\i v_z
\f0\i0 , 
\f1\i v_r
\f0\i0 , 
\f1\i a_x
\f0\i0 , 
\f1\i a_y
\f0\i0 , 
\f1\i a_z
\f0\i0 , 
\f1\i a_r
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 80\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i v_x
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i v_y
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i v_z
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i v_r
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i a_x
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i a_y
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i a_z
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i a_r
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_ptp_coordinate_params\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i velocity
\f0\i0 , 
\f1\i acceleration
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 81\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i velocity
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i velocity
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i acceleration
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i acceleration
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_ptp_jump_params\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i jump
\f0\i0 , 
\f1\i limit
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 82\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i jump
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i limit
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_ptp_common_params\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i velocity
\f0\i0 , 
\f1\i acceleration
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 83\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i velocity
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i acceleration
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_ptp_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 , 
\f1\i r
\f0\i0 , 
\f1\i mode
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 84\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([
\f1\i mode
\f0\i0 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i x
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i y
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i z
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i r
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_end_effector_suction_cup\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i enable
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 False\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 62\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 01\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i enable
\f0\i0  \cf2 \strokec2 is\cf4 \strokec4  \cf8 \strokec8 True\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 01\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 00\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_end_effector_gripper\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i enable
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 False\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 63\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 01\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i enable
\f0\i0  \cf2 \strokec2 is\cf4 \strokec4  \cf8 \strokec8 True\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 01\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 00\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_end_effector_laser\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i power
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 255\cf4 \strokec4 , 
\f1\i enable
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 False\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i \cf11 \strokec11 """Enables the laser. Power from 0 to 255. """
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 61\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i \cf11 \strokec11 # msg.params.extend(bytearray([0x01]))
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i enable
\f0\i0  \cf2 \strokec2 is\cf4 \strokec4  \cf8 \strokec8 True\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 01\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 00\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i \cf11 \strokec11 # Assuming the last byte is power. Seems to have little effect
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([
\f1\i power
\f0\i0 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_queued_cmd_start_exec\cf4 \strokec4 (
\f1\i self
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 240\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 01\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_queued_cmd_stop_exec\cf4 \strokec4 (
\f1\i self
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 241\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 01\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_queued_cmd_clear\cf4 \strokec4 (
\f1\i self
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 245\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 01\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _get_queued_cmd_current_index\cf4 \strokec4 (
\f1\i self
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 246\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         response \cf7 \strokec7 =\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  response \cf2 \strokec2 and\cf4 \strokec4  response.id \cf2 \strokec2 ==\cf4 \strokec4  \cf8 \strokec8 246\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (response)\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 return\cf4 \strokec4  \cf2 \strokec2 -\cf8 \strokec8 1\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf9 \strokec9 @\cf5 \strokec5 staticmethod\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i response
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 unpack_from\cf4 \strokec4 (\cf10 \strokec10 'I'\cf4 \strokec4 , 
\f1\i response
\f0\i0 .params, \cf8 \strokec8 0\cf4 \strokec4 )[\cf8 \strokec8 0\cf4 \strokec4 ]\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 wait_for_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i cmd_id
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         current_cmd_id \cf7 \strokec7 =\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _get_queued_cmd_current_index\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 while\cf4 \strokec4  
\f1\i cmd_id
\f0\i0  \cf2 \strokec2 >\cf4 \strokec4  current_cmd_id:\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i self
\f0\i0 .logger.\cf9 \strokec9 debug\cf4 \strokec4 (\cf10 \strokec10 "Current-ID"\cf4 \strokec4 , current_cmd_id)\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i self
\f0\i0 .logger.\cf9 \strokec9 debug\cf4 \strokec4 (\cf10 \strokec10 "Waiting for"\cf4 \strokec4 , 
\f1\i cmd_id
\f0\i0 )\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4             current_cmd_id \cf7 \strokec7 =\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _get_queued_cmd_current_index\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_home_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 31\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_arc_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 , 
\f1\i r
\f0\i0 , 
\f1\i cir_x
\f0\i0 , 
\f1\i cir_y
\f0\i0 , 
\f1\i cir_z
\f0\i0 , 
\f1\i cir_r
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 101\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i cir_x
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i cir_y
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i cir_z
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i cir_r
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i x
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i y
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i z
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i r
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_home_coordinate\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 , 
\f1\i r
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 30\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i x
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i y
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i z
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i r
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_jog_coordinate_params\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i vx
\f0\i0 , 
\f1\i vy
\f0\i0 , 
\f1\i vz
\f0\i0 , 
\f1\i vr
\f0\i0 , 
\f1\i ax
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 100\cf4 \strokec4 , 
\f1\i ay
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 100\cf4 \strokec4 , 
\f1\i az
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 100\cf4 \strokec4 , 
\f1\i ar
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 100\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 71\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i vx
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i vy
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i vz
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i vr
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i ax
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i ay
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i az
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i ar
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_jog_command\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i cmd
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 73\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 0\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([
\f1\i cmd
\f0\i0 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 jog_x\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i v
\f0\i0 ):\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_jog_coordinate_params\cf4 \strokec4 (\cf9 \strokec9 abs\cf4 \strokec4 (
\f1\i v
\f0\i0 ), \cf8 \strokec8 0\cf4 \strokec4 , \cf8 \strokec8 0\cf4 \strokec4 , \cf8 \strokec8 0\cf4 \strokec4 ,)\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i v
\f0\i0  \cf2 \strokec2 >\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             cmd \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 1\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 elif\cf4 \strokec4  
\f1\i v
\f0\i0  \cf2 \strokec2 <\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             cmd \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 2\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             cmd \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 0\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 wait_for_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_jog_command\cf4 \strokec4 (cmd)))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 jog_y\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i v
\f0\i0 ):\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_jog_coordinate_params\cf4 \strokec4 (\cf8 \strokec8 0\cf4 \strokec4 , \cf9 \strokec9 abs\cf4 \strokec4 (
\f1\i v
\f0\i0 ), \cf8 \strokec8 0\cf4 \strokec4 , \cf8 \strokec8 0\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i v
\f0\i0  \cf2 \strokec2 >\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             cmd \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 3\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 elif\cf4 \strokec4  
\f1\i v
\f0\i0  \cf2 \strokec2 <\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             cmd \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 4\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             cmd \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 0\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 wait_for_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_jog_command\cf4 \strokec4 (cmd)))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 jog_z\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i v
\f0\i0 ):\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_jog_coordinate_params\cf4 \strokec4 (\cf8 \strokec8 0\cf4 \strokec4 , \cf8 \strokec8 0\cf4 \strokec4 , \cf9 \strokec9 abs\cf4 \strokec4 (
\f1\i v
\f0\i0 ), \cf8 \strokec8 0\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i v
\f0\i0  \cf2 \strokec2 >\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             cmd \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 5\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 elif\cf4 \strokec4  
\f1\i v
\f0\i0  \cf2 \strokec2 <\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             cmd \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 6\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             cmd \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 0\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 wait_for_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_jog_command\cf4 \strokec4 (cmd)))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 jog_r\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i v
\f0\i0 ):\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_jog_coordinate_params\cf4 \strokec4 (\cf8 \strokec8 0\cf4 \strokec4 , \cf8 \strokec8 0\cf4 \strokec4 , \cf8 \strokec8 0\cf4 \strokec4 , \cf9 \strokec9 abs\cf4 \strokec4 (
\f1\i v
\f0\i0 ))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i v
\f0\i0  \cf2 \strokec2 >\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             cmd \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 7\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 elif\cf4 \strokec4  
\f1\i v
\f0\i0  \cf2 \strokec2 <\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             cmd \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 8\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             cmd \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 0\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 wait_for_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_jog_command\cf4 \strokec4 (cmd)))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 set_io\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i address
\f0\i0 : \cf5 \strokec5 int\cf4 \strokec4 , 
\f1\i state
\f0\i0 : \cf5 \strokec5 bool\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  \cf2 \strokec2 not\cf4 \strokec4  \cf8 \strokec8 1\cf4 \strokec4  \cf2 \strokec2 <=\cf4 \strokec4  
\f1\i address
\f0\i0  \cf2 \strokec2 <=\cf4 \strokec4  \cf8 \strokec8 22\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 raise\cf4 \strokec4  \cf5 \strokec5 DobotException\cf4 \strokec4 (\cf10 \strokec10 "Invalid address range."\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 131\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'B'\cf4 \strokec4 , 
\f1\i address
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'B'\cf4 \strokec4 , \cf5 \strokec5 int\cf4 \strokec4 (
\f1\i state
\f0\i0 ))))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 wait_for_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 set_hht_trig_output\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i state
\f0\i0 : \cf5 \strokec5 bool\cf4 \strokec4 ) -> \cf8 \strokec8 None\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 41\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 02\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'B'\cf4 \strokec4 , \cf5 \strokec5 int\cf4 \strokec4 (
\f1\i state
\f0\i0 ))))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 get_hht_trig_output\cf4 \strokec4 (
\f1\i self
\f0\i0 ) -> \cf5 \strokec5 bool\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 41\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 0\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         response \cf7 \strokec7 =\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 bool\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 unpack_from\cf4 \strokec4 (\cf10 \strokec10 'B'\cf4 \strokec4 , response.params, \cf8 \strokec8 0\cf4 \strokec4 )[\cf8 \strokec8 0\cf4 \strokec4 ])\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 movej\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 , 
\f1\i r
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 90\cf4 \strokec4 , 
\f1\i mode
\f0\i0 \cf2 \strokec2 =\cf5 \strokec5 MODE_PTP\cf4 \strokec4 .MOVJ_XYZ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_ptp_cmd\cf4 \strokec4 (
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 , 
\f1\i r
\f0\i0 , 
\f1\i mode
\f0\i0 ))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 jump\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 , 
\f1\i r
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 90\cf4 \strokec4 , 
\f1\i mode
\f0\i0 \cf2 \strokec2 =\cf5 \strokec5 MODE_PTP\cf4 \strokec4 .JUMP_XYZ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_ptp_cmd\cf4 \strokec4 (
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 , 
\f1\i r
\f0\i0 , 
\f1\i mode
\f0\i0 ))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 go_arc\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 , 
\f1\i r
\f0\i0 , 
\f1\i cir_x
\f0\i0 , 
\f1\i cir_y
\f0\i0 , 
\f1\i cir_z
\f0\i0 , 
\f1\i cir_r
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_arc_cmd\cf4 \strokec4 (
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 , 
\f1\i r
\f0\i0 , 
\f1\i cir_x
\f0\i0 , 
\f1\i cir_y
\f0\i0 , 
\f1\i cir_z
\f0\i0 , 
\f1\i cir_r
\f0\i0 ))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 suck\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i enable
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_end_effector_suction_cup\cf4 \strokec4 (
\f1\i enable
\f0\i0 ))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 set_home\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 , 
\f1\i r
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 0\cf4 \strokec4 .):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_home_coordinate\cf4 \strokec4 (
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 , 
\f1\i r
\f0\i0 )\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 home\cf4 \strokec4 (
\f1\i self
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_home_cmd\cf4 \strokec4 ())\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 grip\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i enable
\f0\i0 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_end_effector_gripper\cf4 \strokec4 (
\f1\i enable
\f0\i0 ))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 laze\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i power
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 0\cf4 \strokec4 , 
\f1\i enable
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 False\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_end_effector_laser\cf4 \strokec4 (
\f1\i power
\f0\i0 , 
\f1\i enable
\f0\i0 ))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 speed\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i velocity
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 100\cf4 \strokec4 ., 
\f1\i acceleration
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 100\cf4 \strokec4 .):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 wait_for_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_ptp_common_params\cf4 \strokec4 (
\f1\i velocity
\f0\i0 , 
\f1\i acceleration
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 wait_for_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_ptp_coordinate_params\cf4 \strokec4 (
\f1\i velocity
\f0\i0 , 
\f1\i acceleration
\f0\i0 )))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 conveyor_belt\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i speed
\f0\i0 , 
\f1\i direction
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 1\cf4 \strokec4 , 
\f1\i interface
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 0\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  \cf8 \strokec8 0.0\cf4 \strokec4  \cf2 \strokec2 <=\cf4 \strokec4  
\f1\i speed
\f0\i0  \cf2 \strokec2 <=\cf4 \strokec4  \cf8 \strokec8 1.0\cf4 \strokec4  \cf2 \strokec2 and\cf4 \strokec4  (
\f1\i direction
\f0\i0  \cf2 \strokec2 ==\cf4 \strokec4  \cf8 \strokec8 1\cf4 \strokec4  \cf2 \strokec2 or\cf4 \strokec4  
\f1\i direction
\f0\i0  \cf2 \strokec2 ==\cf4 \strokec4  \cf2 \strokec2 -\cf8 \strokec8 1\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             motor_speed \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 70\cf4 \strokec4  \cf2 \strokec2 *\cf4 \strokec4  
\f1\i speed
\f0\i0  \cf2 \strokec2 *\cf4 \strokec4  STEP_PER_CIRCLE \cf2 \strokec2 /\cf4 \strokec4  MM_PER_CIRCLE \cf2 \strokec2 *\cf4 \strokec4  
\f1\i direction
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_stepper_motor\cf4 \strokec4 (motor_speed, 
\f1\i interface
\f0\i0 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 raise\cf4 \strokec4  \cf5 \strokec5 DobotException\cf4 \strokec4 (\cf10 \strokec10 "Wrong Parameter"\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_stepper_motor\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i speed
\f0\i0 , 
\f1\i interface
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 0\cf4 \strokec4 , 
\f1\i motor_control
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 True\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 87\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i interface
\f0\i0  \cf2 \strokec2 ==\cf4 \strokec4  \cf8 \strokec8 1\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 01\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 00\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i motor_control
\f0\i0  \cf2 \strokec2 is\cf4 \strokec4  \cf8 \strokec8 True\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 01\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 00\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'i'\cf4 \strokec4 , 
\f1\i speed
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 conveyor_belt_distance\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i speed
\f0\i0 , 
\f1\i distance
\f0\i0 , 
\f1\i direction
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 1\cf4 \strokec4 , 
\f1\i interface
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 0\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  \cf8 \strokec8 0.0\cf4 \strokec4  \cf2 \strokec2 <=\cf4 \strokec4  
\f1\i speed
\f0\i0  \cf2 \strokec2 <=\cf4 \strokec4  \cf8 \strokec8 100.0\cf4 \strokec4  \cf2 \strokec2 and\cf4 \strokec4  (
\f1\i direction
\f0\i0  \cf2 \strokec2 ==\cf4 \strokec4  \cf8 \strokec8 1\cf4 \strokec4  \cf2 \strokec2 or\cf4 \strokec4  
\f1\i direction
\f0\i0  \cf2 \strokec2 ==\cf4 \strokec4  \cf2 \strokec2 -\cf8 \strokec8 1\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             motor_speed \cf7 \strokec7 =\cf4 \strokec4  
\f1\i speed
\f0\i0  \cf2 \strokec2 *\cf4 \strokec4  STEP_PER_CIRCLE \cf2 \strokec2 /\cf4 \strokec4  MM_PER_CIRCLE \cf2 \strokec2 *\cf4 \strokec4  
\f1\i direction
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_stepper_motor_distance\cf4 \strokec4 (motor_speed, 
\f1\i distance
\f0\i0 , 
\f1\i interface
\f0\i0 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 raise\cf4 \strokec4  \cf5 \strokec5 DobotException\cf4 \strokec4 (\cf10 \strokec10 "Wrong Parameter"\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_stepper_motor_distance\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i speed
\f0\i0 , 
\f1\i distance
\f0\i0 , 
\f1\i interface
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 0\cf4 \strokec4 , 
\f1\i motor_control
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 True\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 88\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 03\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i interface
\f0\i0  \cf2 \strokec2 ==\cf4 \strokec4  \cf8 \strokec8 1\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 01\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 00\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 if\cf4 \strokec4  
\f1\i motor_control
\f0\i0  \cf2 \strokec2 is\cf4 \strokec4  \cf8 \strokec8 True\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 01\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 00\cf4 \strokec4 ]))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'i'\cf4 \strokec4 , 
\f1\i speed
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'I'\cf4 \strokec4 , 
\f1\i distance
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_cp_params\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i velocity
\f0\i0 , 
\f1\i acceleration
\f0\i0 , 
\f1\i period
\f0\i0 ):\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 90\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 3\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i acceleration
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i velocity
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i period
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf2 \strokec2 0x\cf8 \strokec8 0\cf4 \strokec4 ]))  
\f1\i \cf11 \strokec11 # non real-time mode (what does it mean??)
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 _set_cple_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i x
\f0\i0 , 
\f1\i y
\f0\i0 , 
\f1\i z
\f0\i0 , 
\f1\i power
\f0\i0 , 
\f1\i absolute
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 False\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         \cf2 \strokec2 assert\cf4 \strokec4  \cf8 \strokec8 0\cf4 \strokec4  \cf2 \strokec2 <=\cf4 \strokec4  
\f1\i power
\f0\i0  \cf2 \strokec2 <=\cf4 \strokec4  \cf8 \strokec8 100\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         msg \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 Message\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.id \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 92\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.ctrl \cf7 \strokec7 =\cf4 \strokec4  \cf2 \strokec2 0x\cf8 \strokec8 3\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 bytearray\cf4 \strokec4 ([\cf5 \strokec5 int\cf4 \strokec4 (
\f1\i absolute
\f0\i0 )])\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i x
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i y
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i z
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         msg.params.\cf9 \strokec9 extend\cf4 \strokec4 (\cf5 \strokec5 bytearray\cf4 \strokec4 (\cf5 \strokec5 struct\cf4 \strokec4 .\cf9 \strokec9 pack\cf4 \strokec4 (\cf10 \strokec10 'f'\cf4 \strokec4 , 
\f1\i power
\f0\i0 )))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         \cf2 \strokec2 return\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 _send_command\cf4 \strokec4 (msg)\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4     \cf2 \strokec2 def\cf4 \strokec4  \cf9 \strokec9 engrave\cf4 \strokec4 (
\f1\i self
\f0\i0 , 
\f1\i image
\f0\i0 , 
\f1\i pixel_size
\f0\i0 , 
\f1\i low
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 0.0\cf4 \strokec4 , 
\f1\i high
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 40.0\cf4 \strokec4 , 
\f1\i velocity
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 5\cf4 \strokec4 , 
\f1\i acceleration
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 5\cf4 \strokec4 , 
\f1\i actual_acceleration
\f0\i0 \cf2 \strokec2 =\cf8 \strokec8 5\cf4 \strokec4 ):\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i \cf11 \strokec11 """
\f0\i0 \cf6 \cb1 \strokec6 \
\pard\pardeftab720\partightenfactor0

\f1\i \cf11 \cb3 \strokec11         Shade engrave the given image.
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         :param image: NumPy array representing the image. Should be 8 bit grayscale image.
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         :param pixel_size: Pixel size in mm.
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         :param low: Image values will be scaled to range of <low, high>.
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         :param high: dtto
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         :param velocity: Maximum junction velocity (CPParams).
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         :param acceleration: Maximum planned accelerations (CPParams).
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         :param actual_acceleration: Maximum actual acceleration, used in non-real-time mode.
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         :return:
\f0\i0 \cf6 \cb1 \strokec6 \
\

\f1\i \cf11 \cb3 \strokec11         Example usage:
\f0\i0 \cf6 \cb1 \strokec6 \
\

\f1\i \cf11 \cb3 \strokec11         \cf2 \strokec2 >>> \cf11 \strokec11 from PIL import Image
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         \cf2 \strokec2 >>> \cf11 \strokec11 import numpy as np
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         \cf2 \strokec2 >>> \cf11 \strokec11 d = Dobot()
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         \cf2 \strokec2 >>> \cf11 \strokec11 im = Image.open("image.jpg")
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         \cf2 \strokec2 >>> \cf11 \strokec11 im = im.convert("L")
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         \cf2 \strokec2 >>> \cf11 \strokec11 im = np.array(im)
\f0\i0 \cf6 \cb1 \strokec6 \
\

\f1\i \cf11 \cb3 \strokec11         \cf2 \strokec2 >>> \cf11 \strokec11 x, y = d.get_pose().position[0:2]
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         \cf2 \strokec2 >>> \cf11 \strokec11 d.wait_for_cmd(d.move_to(x, y, -74.0))
\f0\i0 \cf6 \cb1 \strokec6 \
\

\f1\i \cf11 \cb3 \strokec11         \cf2 \strokec2 >>> \cf11 \strokec11 d.engrave(im, 0.1)
\f0\i0 \cf6 \cb1 \strokec6 \

\f1\i \cf11 \cb3 \strokec11         """
\f0\i0 \cf6 \cb1 \strokec6 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4         
\f1\i image
\f0\i0  \cf7 \strokec7 =\cf4 \strokec4  
\f1\i image
\f0\i0 .\cf9 \strokec9 astype\cf4 \strokec4 (\cf10 \strokec10 "float64"\cf4 \strokec4 )\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i image
\f0\i0  \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 255.0\cf4 \strokec4  \cf2 \strokec2 -\cf4 \strokec4  
\f1\i image
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i image
\f0\i0  \cf7 \strokec7 =\cf4 \strokec4  (
\f1\i image
\f0\i0  \cf2 \strokec2 -\cf4 \strokec4  
\f1\i image
\f0\i0 .\cf9 \strokec9 min\cf4 \strokec4 ()) \cf2 \strokec2 /\cf4 \strokec4  (
\f1\i image
\f0\i0 .\cf9 \strokec9 max\cf4 \strokec4 () \cf2 \strokec2 -\cf4 \strokec4  
\f1\i image
\f0\i0 .\cf9 \strokec9 min\cf4 \strokec4 ()) \cf2 \strokec2 *\cf4 \strokec4  (
\f1\i high
\f0\i0  \cf2 \strokec2 -\cf4 \strokec4  
\f1\i low
\f0\i0 ) \cf2 \strokec2 +\cf4 \strokec4  
\f1\i low
\f0\i0 \cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         x, y, z \cf7 \strokec7 =\cf4 \strokec4  
\f1\i self
\f0\i0 .\cf9 \strokec9 get_pose\cf4 \strokec4 ().position[\cf8 \strokec8 0\cf4 \strokec4 :\cf8 \strokec8 3\cf4 \strokec4 ]  
\f1\i \cf11 \strokec11 # get current/starting position
\f0\i0 \cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 wait_for_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 laze\cf4 \strokec4 (\cf8 \strokec8 0\cf4 \strokec4 , \cf8 \strokec8 False\cf4 \strokec4 ))\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_queued_cmd_clear\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 wait_for_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_cp_params\cf4 \strokec4 (
\f1\i velocity
\f0\i0 , 
\f1\i acceleration
\f0\i0 , 
\f1\i actual_acceleration
\f0\i0 )))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_queued_cmd_stop_exec\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4         stopped \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 True\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         indexes \cf7 \strokec7 =\cf4 \strokec4  \cf9 \strokec9 deque\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         \cf2 \strokec2 for\cf4 \strokec4  row_idx, row \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 enumerate\cf4 \strokec4 (
\f1\i image
\f0\i0 ):\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4             
\f1\i \cf11 \strokec11 # first feed the queue to be almost full
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 if\cf4 \strokec4  stopped \cf2 \strokec2 and\cf4 \strokec4  \cf9 \strokec9 len\cf4 \strokec4 (indexes) \cf2 \strokec2 >\cf4 \strokec4  MAX_QUEUE_LEN\cf2 \strokec2 -\cf8 \strokec8 2\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_queued_cmd_start_exec\cf4 \strokec4 ()\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 stopped \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 False\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4             \cf2 \strokec2 if\cf4 \strokec4  row_idx \cf2 \strokec2 %\cf4 \strokec4  \cf8 \strokec8 2\cf4 \strokec4  \cf2 \strokec2 ==\cf4 \strokec4  \cf8 \strokec8 1\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 data \cf7 \strokec7 =\cf4 \strokec4  \cf5 \strokec5 reversed\cf4 \strokec4 (row)\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 rev \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 True\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4             \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 data \cf7 \strokec7 =\cf4 \strokec4  row\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 rev \cf7 \strokec7 =\cf4 \strokec4  \cf8 \strokec8 False\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4             \cf2 \strokec2 for\cf4 \strokec4  col_idx, ld \cf2 \strokec2 in\cf4 \strokec4  \cf5 \strokec5 enumerate\cf4 \strokec4 (data):\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4                 \cf2 \strokec2 if\cf4 \strokec4  \cf2 \strokec2 not\cf4 \strokec4  rev:\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                     y_ofs \cf7 \strokec7 =\cf4 \strokec4  col_idx \cf2 \strokec2 *\cf4 \strokec4  
\f1\i pixel_size
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf2 \strokec2 else\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                     y_ofs \cf7 \strokec7 =\cf4 \strokec4  (\cf9 \strokec9 len\cf4 \strokec4 (row)\cf2 \strokec2 -\cf8 \strokec8 1\cf4 \strokec4  \cf2 \strokec2 -\cf4 \strokec4  col_idx) \cf2 \strokec2 *\cf4 \strokec4  
\f1\i pixel_size
\f0\i0 \cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4                 indexes.\cf9 \strokec9 append\cf4 \strokec4 (\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                     
\f1\i self
\f0\i0 .\cf9 \strokec9 _extract_cmd_index\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 _set_cple_cmd\cf4 \strokec4 (x \cf2 \strokec2 +\cf4 \strokec4  row_idx \cf2 \strokec2 *\cf4 \strokec4  
\f1\i pixel_size
\f0\i0 ,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                                                                y \cf2 \strokec2 +\cf4 \strokec4  y_ofs,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                                                                z,\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                                                                ld, \cf8 \strokec8 True\cf4 \strokec4 )))\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4                 
\f1\i \cf11 \strokec11 # then feed it as necessary to keep it almost full
\f0\i0 \cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                 \cf2 \strokec2 while\cf4 \strokec4  \cf2 \strokec2 not\cf4 \strokec4  stopped \cf2 \strokec2 and\cf4 \strokec4  \cf9 \strokec9 len\cf4 \strokec4 (indexes) \cf2 \strokec2 >\cf4 \strokec4  MAX_QUEUE_LEN\cf2 \strokec2 -\cf8 \strokec8 12\cf4 \strokec4 :\cf6 \cb1 \strokec6 \
\cf4 \cb3 \strokec4                     
\f1\i self
\f0\i0 .\cf9 \strokec9 wait_for_cmd\cf4 \strokec4 (indexes.\cf9 \strokec9 popleft\cf4 \strokec4 ())\cf6 \cb1 \strokec6 \
\
\cf4 \cb3 \strokec4         
\f1\i self
\f0\i0 .\cf9 \strokec9 wait_for_cmd\cf4 \strokec4 (
\f1\i self
\f0\i0 .\cf9 \strokec9 laze\cf4 \strokec4 (\cf8 \strokec8 0\cf4 \strokec4 , \cf8 \strokec8 False\cf4 \strokec4 ))\cf6 \cb1 \strokec6 \
\
}